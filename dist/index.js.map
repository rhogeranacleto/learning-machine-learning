{"version":3,"file":"index.js","sourceRoot":"/","sources":["index.ts"],"names":[],"mappings":"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","sourcesContent":["import { createConnection } from \"typeorm\";\nimport { VehicleModelRecord } from \"./src/vehicle-model-record.entity\";\nimport * as brain from 'brain.js';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf8');\n\nfunction encode(d: string) {\n\n\treturn d.split('').map(c => c.charCodeAt(0) / 255);\n}\n\nlet maxLengthInput = -1;\n\nfunction fixLengths(data) {\n\n\tif (maxLengthInput < 0) {\n\n\t\tfor (let i = 0; i < data.length; i++) {\n\n\t\t\tif (data[i].input.length > maxLengthInput) {\n\n\t\t\t\tmaxLengthInput = data[i].input.length;\n\t\t\t}\n\t\t}\n\t}\n\n\tfor (let i = 0; i < data.length; i++) {\n\n\t\twhile (data[i].input.length < maxLengthInput) {\n\n\t\t\tdata[i].input.push(0);\n\t\t}\n\t}\n\n\treturn data;\n}\n\nasync function bootstrap() {\n\n\tconst connection = await createConnection();\n\n\tconst records = await connection.getRepository(VehicleModelRecord).find({\n\t\ttake: 2000\n\t});\n\n\tconsole.log(records[1], records[5], records[7]);\n\n\tconst net = new brain.NeuralNetwork({\n\t\thiddenLayers: [20, 10]\n\t});\n\n\tconst trainData = fixLengths(records.map(record => {\n\n\t\tif (record.vehicle_model && record.vehicle_model.vehicle_brand) {\n\n\t\t\tconst brand = record.vehicle_model.vehicle_brand.name;\n\t\t\t// const versionName = record.vehicle_model_version ? record.vehicle_model_version.name : '';\n\n\t\t\treturn {\n\t\t\t\tinput: encode(record.name),\n\t\t\t\toutput: {\n\t\t\t\t\t[brand]: 1\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\treturn;\n\t}).filter(Boolean));\n\n\tconsole.log(trainData.length);\n\n\tconst train = net.train(trainData, {\n\t\tlog: e => console.log(e),\n\t\t// learningRate: 0.1,\n\t\t// logPeriod: 1\n\t\t// errorThresh: 0.001,\n\t\t// iterations: 200\n\t});\n\n\tconsole.log(train);\n\n\tconsole.log('Pode digita:');\n\n\tprocess.stdin.on('data', function (chunk) {\n\n\t\tconst split = chunk.split('\\n')[0];\n\t\tconst en = encode(split);\n\n\t\twhile (en.length < maxLengthInput) {\n\n\t\t\ten.push(0);\n\t\t}\n\n\t\t// console.log(en);\n\n\t\tconst output = net.run(en);\n\n\t\t// console.log('output', output);\n\t\tconst jj = Object.entries(output).sort((a, b) => a[1] - b[1]);\n\n\t\tconsole.log('result', jj[0], jj[1], jj[2]);\n\t});\n}\n\nbootstrap();"]}